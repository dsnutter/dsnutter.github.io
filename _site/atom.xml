<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>D. Nutter</title>
 <link href="http://dsnutter.github.io/atom.xml" rel="self"/>
 <link href="http://dsnutter.github.io/"/>
 <updated>2017-01-10T10:20:25-05:00</updated>
 <id>http://dsnutter.github.io</id>
 <author>
   <name>D. Nutter</name>
   <email></email>
 </author>

 
 <entry>
   <title>Setting Up a Mac with Minicom for an ELM32x OBD-II Device</title>
   <link href="http://dsnutter.github.io/setting-up-mac-with-minicom-elm32x-obd-II-device/"/>
   <updated>2016-12-16T00:00:00-05:00</updated>
   <id>http://dsnutter.github.io/setting-up-mac-with-minicom-elm32x-obd-II-device</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article explains how to setup a ELM32x OBD-II device with minicom on an Apple Macintosh. An ELM32x OBD-II device plugs into the OBD-II connector on your car and allows you to communicate with it using OBD-II hex codes.
The ELM32x has an interface similar to a Hayes “AT” interface when connecting to it via a serial terminal program.
This serial terminal interface is a good way to test out OBD-II hex values out before you write a program that sends the hex values to the device and car.
To start the install, open the “terminal” application on your Mac.&lt;/p&gt;

&lt;h2 id=&quot;install-minicom&quot;&gt;Install Minicom&lt;/h2&gt;

&lt;p&gt;Install minicom using &lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install minicom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setup-minicom&quot;&gt;Setup Minicom&lt;/h2&gt;

&lt;p&gt;Plug in your OBD-II adapter. Mine was an OBDLink SX USB adapter. At the terminal, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You are looking for a tty device named /dev/tty.usbserial-xxxx where xxxx is a number. The tty could also be a bluetooth tty also 
depending on the type of OBD-II ELM32x adapter you have. (Note: if its bluetooth, you will need to pair the device with your Mac)&lt;/p&gt;

&lt;p&gt;Setup minicom by typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minicom -s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should see the following menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/setting-up-mac-with-minicom-elm32x-obd-II-device/MinicomSettingsMenu.png&quot; alt=&quot;Settings Menu - Setting Up a Mac and ELM32x OBD-II Device With Minicom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the arrow keys on the keyboard, select “Serial port setup” and press return. You should see the following menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/setting-up-mac-with-minicom-elm32x-obd-II-device/MinicomSerialPortSetup.png&quot; alt=&quot;Serial Port Setup - Setting Up a Mac and ELM32x OBD-II Device With Minicom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the keyboard keys to select and input the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;A: Input serial adapter device name, such as /dev/tty.usbserial-xxxx
E: Set BPS to 115200
F: Set hardware flow control to &quot;No&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When finished, press return.&lt;/p&gt;

&lt;p&gt;Using the arrow keys on the keyboard, select “Screen and keyboard” and press return. You should see the following menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/setting-up-mac-with-minicom-elm32x-obd-II-device/MinicomScreenKeyboardSettings.png&quot; alt=&quot;Screen and Keyboard Setup - Setting Up a Mac and ELM32x OBD-II Device With Minicom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use the keyboard keys to select and input the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;P: Set Add linefeed to &quot;Yes&quot;
Q: Set local echo to &quot;No&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When finished choose “Save setup as dfl”, which savings the settings you entered as the defaults.&lt;/p&gt;

&lt;p&gt;Choose “Exit from Minicom” and the menus will close.&lt;/p&gt;

&lt;p&gt;From the terminal prompt, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;minicom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Minicom will start, so try a sample command. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ATI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and the ELM32x will respond with the device firmware version.&lt;/p&gt;

&lt;p&gt;For more simple OBD-II commands, see this article on &lt;a href=&quot;http://www.obdsol.com/knowledgebase/obd-software-development/reading-real-time-data/&quot; target=&quot;_blank&quot;&gt;reading real time data&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>DC Inverting Amplifiers Using Opamps</title>
   <link href="http://dsnutter.github.io/dc-opamps-inverting/"/>
   <updated>2016-01-22T00:00:00-05:00</updated>
   <id>http://dsnutter.github.io/dc-opamps-inverting</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/dc-opamps-inverting/dc-opamps-schematic.png&quot; alt=&quot;DC Inverting Opamp Circuit Diagram - DC Inverting Amplifiers Using Opamps&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;For opamps, the voltage at the + and - inputs are equal, so with the +
input attached to ground, the voltage at the - input is 0 volts. Also,
the current into the + and - inputs of the opamp is 0 amps (or close
enough to be considered an ideal opamp).&lt;/p&gt;

&lt;h2 id=&quot;current&quot;&gt;Current&lt;/h2&gt;

&lt;p&gt;The KCL equation for the opamp at node A is below. Note the current into
the - opamp input is 0 amps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dc-opamps-inverting/dc-opamps-current.png&quot; alt=&quot;KCL at node A - DC Inverting Amplifiers Using Opamps&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;inverting-amplifier-equation-derivation-by-node-method&quot;&gt;Inverting Amplifier Equation Derivation by Node Method&lt;/h2&gt;

&lt;p&gt;The derivation of how to calcuate the amplifier output given a DC input
and input and feedback resistor values is listed below. The voltage at
node A is 0 volts since the voltage at the + input is 0 volts. Note that
Vout is negative, therefore the label “inverting amplifier”. The gain of
the DC opamp circuit is (Rf / R1).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/dc-opamps-inverting/dc-opamps-nodeMethod.png&quot; alt=&quot;Inverting Amplifier Equation Derivation - DC Inverting Amplifiers Using Opamps&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Unit Testing an HTML5 Canvas with Canteen</title>
   <link href="http://dsnutter.github.io/unit-testing-html5-canvas-with-canteen/"/>
   <updated>2015-03-19T00:00:00-04:00</updated>
   <id>http://dsnutter.github.io/unit-testing-html5-canvas-with-canteen</id>
   <content type="html">&lt;h2 id=&quot;what-is-canteen&quot;&gt;What is Canteen?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.platfora.com/introducing-canteen-ultimate-html5-canvas-testing-library/&quot;&gt;The Canteen home
page&lt;/a&gt;
describes the project as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...Canteen...] records all of the drawing instructions, such as method calls and property changes, by creating a wrapper around the HTML5 Canvas context object that records all of these instructions and then proxies them to the native HTML5 Canvas context for rendering. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I use Canteen to monitor the HTML5 canvas interface to build unit tests.
Canteen keeps track of all the drawing commands sent to the canvas and
you can export the commands as an array of the canvas instruction stack,
JSON, or md5sum. This yields a repeatable canvas structure that you can
compare to for unit testing. Canteen offers a simpler way to test HTML5
canvas without having to do image diffs, image recognition, or something
more complex with image or SVG exports of the canvas.&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-want-to-unit-test-the-canvas-object&quot;&gt;Why would I want to unit test the canvas object?&lt;/h2&gt;

&lt;p&gt;When unit testing the canvas object, Canteen offers a way to repeatedly
verify that the drawing on the canvas executes the same canvas
instructions as when you developed the canvas codebase. I develop what I
want to draw on the canvas and use Karma and Jasmine to run tests
against it.&lt;/p&gt;

&lt;h2 id=&quot;installing-jasmine-phantomjs-angularjs-and-canteen&quot;&gt;Installing Jasmine, PhantomJS, AngularJS, and Canteen&lt;/h2&gt;

&lt;p&gt;For development I use a Windows 7 x64 machine.
&lt;a href=&quot;https://github.com/node-xmpp/node-expat/issues/57&quot;&gt;Here&lt;/a&gt; are some
specific notes on using node.js with Windows 7. If you are running
Windows 7 then install the &lt;a href=&quot;http://www.microsoft.com/en-us/download/details.aspx?id=8279&quot;&gt;Windows
SDKs&lt;/a&gt;, if
you are running some other OS then ignore the instructions for Windows
7.&lt;/p&gt;

&lt;p&gt;First, install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; for your platform.&lt;/p&gt;

&lt;p&gt;If you are running Windows 7 open a Node.js command prompt, and execute
either&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call &quot;C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\bin\\Setenv.cmd&quot; /Release /x86
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;for x86 Windows 7 or\&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;call &quot;C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\bin\\Setenv.cmd&quot; /Release /x64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;for x64 Windows 7.&lt;/p&gt;

&lt;p&gt;Then install &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;https://docs.angularjs.org/api/ngMock/object/angular.mock&quot;&gt;Angular
Mocks&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install angular angular-mocks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then install &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; and
&lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install phantomjs jasmine
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then install Karma Runner and the associated Karma Plugins for Jasmine
and PhantomJS&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install karma karma-jasmine karma-phantomjs-launcher --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Also, under Windows 7, ignore any warnings when installing.&lt;/p&gt;

&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/platfora/Canteen&quot;&gt;Canteen&lt;/a&gt; github
repository (you must have &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; installed if you
don’t already)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/platfora/Canteen.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;karma-configuration-file&quot;&gt;Karma Configuration File&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Karma configuration
module.exports = function(config) {
config.set({

    // base path that will be used to resolve all patterns (eg. files, exclude)
    basePath: 'D:/projects/',

    // frameworks to use
    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter
    frameworks: ['jasmine'],

    // list of files / patterns to load in the browser
    files: [
    // referenced libraries
    'node_modules/angular/angular.min.js',
    'node_modules/angular-mocks/angular-mocks.js',
    'Canteen/build/canteen.js',

    // application files
    'canvas.module.js',

    // unit tests
    'test.canvas.module.js'
    ],


    // list of files to exclude
    exclude: [
    ],


    // preprocess matching files before serving them to the browser
    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
    },


    // test results reporter to use
    // possible values: 'dots', 'progress'
    // available reporters: https://npmjs.org/browse/keyword/karma-reporter
    reporters: ['progress'],

    // enable / disable colors in the output (reporters and logs)
    colors: true,


    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,


    // enable / disable watching file and executing tests whenever any file changes
    autoWatch: false,


    // start these browsers
    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher
    browsers: ['PhantomJS'],


    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
    singleRun: true
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;angularjs-code-to-test&quot;&gt;AngularJS Code To Test&lt;/h2&gt;

&lt;p&gt;The following AngularJS service draws a circle on a canvas.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.module(&quot;lec.canvas&quot;, [])

.factory('lec.canvas.service.draw', function() {
    // the HTML5 drawing context and items to set defaults for
    var _canvas, _context;

    return {
        // initializes parameters for the segmented drawing service
        initialize: function(canvas) {
            _canvas = canvas;
            _context = _canvas.getContext('2d');
            // clears the canvas, and resets vars
            this.clear();
        },
        context: function() {
        return _context;
        },
        // clear the canvas of any previous drawings
        clear: function() {
            _context.clearRect(0, 0, _canvas.width, _canvas.height);
        },
        // draws a circle on the canvas
        circle: function(center, radius, color) {
            _context.beginPath();
            _context.arc(center.x, center.y, radius, 0, 2*Math.PI, false);
            _context.lineWidth = 2;
            _context.strokeStyle = color;
            _context.stroke();
        },
    };
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jasmine-tests&quot;&gt;Jasmine Tests&lt;/h2&gt;

&lt;p&gt;The following is the jasmine test developed to test the service that
draws the circle.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe('lec.canvas', function() {
// test the segmented ring drawing functionality
describe('lec.canvas.service.draw', function() {
    var draw;
    beforeEach(function() {
    // load the module.
    module('lec.canvas');

    inject(function($injector) {
        draw = $injector.get('lec.canvas.service.draw');
        var canvas = document.createElement('canvas');
        canvas.id     = &quot;testCanvas&quot;;
        canvas.width  = 500;
        canvas.height = 500;
        // initialize the canvas for drawing
        draw.initialize(canvas);
    });
    });
    describe('clear', function() {
    it('erases the canvas', function() {
        draw.clear();
        var expected = 'c62e5ecf5bead7be72f252325e55bc02';

        var hash = draw.context().hash();

        //console.log('json: ' + json);
        //console.log('hash: ' + hash);

        // example unit test assertion
        expect(hash).toBe(expected);

        // clear the stack
        draw.context().clean();
    });
    });
    describe('circle', function() {
    it('creates a circle', function() {
        var expected = '';
        
        draw.circle({x: 250, y: 250}, 100, 'red');

        json = draw.context().json();
        hash = draw.context().hash();

        console.log('json: ' + json);
        console.log('hash: ' + hash);

        // example unit test assertion
        expect(hash).toBe(expected);

        // clear the stack
        draw.context().clean();
    });
    });
});
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;test-runs&quot;&gt;Test Runs&lt;/h2&gt;

&lt;p&gt;Execute the unit test with:&lt;/p&gt;

&lt;p&gt;karma start canvas.conf.js&lt;/p&gt;

&lt;p&gt;The first test run is an unsuccessful test, and the code will output the
JSON and md5sum representing the canvas generated.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[32mINFO [karma]: [39mKarma v0.12.31 server started at http://localhost:9876/
[32mINFO [launcher]: [39mStarting browser PhantomJS
[32mINFO [PhantomJS 1.9.8 (Windows 7)]: [39mConnected on socket nCQUhrfMg-pT57ifPpfN with id 9109488
PhantomJS 1.9.8 (Windows 7): Executed 0 of 2[32m SUCCESS[39m (0 secs / 0 secs)
[1A[2KPhantomJS 1.9.8 (Windows 7): Executed 1 of 2[32m SUCCESS[39m (0 secs / 0.024 secs)
[1A[2KLOG: [36m'json: [{&quot;method&quot;:&quot;clearRect&quot;,&quot;arguments&quot;:[0,0,500,500]},{&quot;method&quot;:&quot;beginPath&quot;,&quot;arguments&quot;:[]},{&quot;method&quot;:&quot;arc&quot;,&quot;arguments&quot;:[250,250,100,0,6.283185307179586,false]},{&quot;attr&quot;:&quot;lineWidth&quot;,&quot;val&quot;:2},{&quot;attr&quot;:&quot;strokeStyle&quot;,&quot;val&quot;:&quot;red&quot;},{&quot;method&quot;:&quot;stroke&quot;,&quot;arguments&quot;:[]}]'[39m
PhantomJS 1.9.8 (Windows 7): Executed 1 of 2[32m SUCCESS[39m (0 secs / 0.024 secs)
[1A[2KLOG: [36m'hash: 00f624e6dff2bf91662a1f80f6981ad9'[39m
PhantomJS 1.9.8 (Windows 7): Executed 1 of 2[32m SUCCESS[39m (0 secs / 0.024 secs)
[1A[2K[31mPhantomJS 1.9.8 (Windows 7) lec.canvas lec.canvas.service.draw circle creates a circle FAILED[39m
    Expected '00f624e6dff2bf91662a1f80f6981ad9' to be ''.
        at D:/projects/Websites/content/entropteria/articles/canteen/codebase/test.canvas.module.js:50
PhantomJS 1.9.8 (Windows 7): Executed 2 of 2[31m (1 FAILED)[39m (0 secs / 0.033 secs)
[1A[2KPhantomJS 1.9.8 (Windows 7): Executed 2 of 2[31m (1 FAILED)[39m (0 secs / 0.033 secs)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The json canvas command result and the hash of the commands were printed
out with “console.log”. You can now base a test off of either the JSON
or md5sum results. I chose the md5sum, and assigned the md5sum
‘00f624e6dff2bf91662a1f80f6981ad9’ in the ‘expected’ string, commented
out the console.log() commands, and the result is below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[32mINFO [karma]: [39mKarma v0.12.31 server started at http://localhost:9876/
[32mINFO [launcher]: [39mStarting browser PhantomJS
[32mINFO [PhantomJS 1.9.8 (Windows 7)]: [39mConnected on socket R1DzjSZ7qVhKA0l7RGp8 with id 11436839
PhantomJS 1.9.8 (Windows 7): Executed 0 of 2[32m SUCCESS[39m (0 secs / 0 secs)
[1A[2KPhantomJS 1.9.8 (Windows 7): Executed 1 of 2[32m SUCCESS[39m (0 secs / 0.024 secs)
[1A[2KPhantomJS 1.9.8 (Windows 7): Executed 2 of 2[32m SUCCESS[39m (0 secs / 0.03 secs)
[1A[2KPhantomJS 1.9.8 (Windows 7): Executed 2 of 2[32m SUCCESS[39m (0 secs / 0.03 secs)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I really like Canteen as it offers a way to test HTML5 canvas in a
simpler way. To view an example of a more complex web application I
developed using Canteen, see
&lt;a href=&quot;http://utility.lowentropycreations.com/calculators/segmented-bowl-ring-calculator.php&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 

</feed>
